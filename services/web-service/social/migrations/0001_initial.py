# Generated by Django 4.2 on 2025-08-26 23:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0002_player_playertransfer_playerstatistics_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content', max_length=1000)),
                ('comment_type', models.CharField(choices=[('match', 'Match Comment'), ('team', 'Team Comment'), ('general', 'General Comment')], default='general', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('pending', 'Pending Moderation'), ('hidden', 'Hidden'), ('deleted', 'Deleted')], default='active', max_length=20)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('dislikes_count', models.PositiveIntegerField(default=0)),
                ('replies_count', models.PositiveIntegerField(default=0)),
                ('is_flagged', models.BooleanField(default=False)),
                ('flagged_count', models.PositiveIntegerField(default=0)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('moderation_reason', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(blank=True, help_text='Related match', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.match')),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent comment for replies', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='social.comment')),
                ('team', models.ForeignKey(blank=True, help_text='Related team', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.team')),
                ('user', models.ForeignKey(help_text='User who made the comment', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('followed', models.ForeignKey(help_text='User being followed', on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ForeignKey(help_text='User who follows', on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_follows',
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('comment', 'Posted a comment'), ('like', 'Liked a comment'), ('follow', 'Started following user'), ('join', 'Joined the platform')], max_length=20)),
                ('description', models.CharField(max_length=255)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='social.comment')),
                ('related_match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.match')),
                ('related_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities_about', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('new_follower', 'New Follower'), ('comment_reply', 'Comment Reply'), ('comment_like', 'Comment Liked'), ('mention', 'User Mention')], max_length=20)),
                ('title', models.CharField(max_length=100)),
                ('message', models.CharField(max_length=255)),
                ('is_read', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('related_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='social.comment')),
                ('related_follow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='social.userfollow')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('spam', 'Spam'), ('harassment', 'Harassment'), ('hate_speech', 'Hate Speech'), ('inappropriate', 'Inappropriate Content'), ('fake_news', 'Fake News'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('reviewed', 'Reviewed'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='social.comment')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_reports', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comment_reports',
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.CharField(choices=[('like', 'Like'), ('dislike', 'Dislike')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='social.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comment_likes',
            },
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['follower'], name='user_follow_followe_a0b992_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['followed'], name='user_follow_followe_a7d7ca_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['created_at'], name='user_follow_created_744e51_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfollow',
            unique_together={('follower', 'followed')},
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', '-created_at'], name='user_activi_user_id_47a698_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['activity_type'], name='user_activi_activit_534635_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['created_at'], name='user_activi_created_9fa3ca_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', '-created_at'], name='notificatio_recipie_2d3764_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['sender'], name='notificatio_sender__893501_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type'], name='notificatio_notific_19df93_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['is_read'], name='notificatio_is_read_3f8c44_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['created_at'], name='notificatio_created_e4c995_idx'),
        ),
        migrations.AddIndex(
            model_name='commentreport',
            index=models.Index(fields=['comment'], name='comment_rep_comment_d65af4_idx'),
        ),
        migrations.AddIndex(
            model_name='commentreport',
            index=models.Index(fields=['reporter'], name='comment_rep_reporte_d95e1c_idx'),
        ),
        migrations.AddIndex(
            model_name='commentreport',
            index=models.Index(fields=['status'], name='comment_rep_status_7b7a8a_idx'),
        ),
        migrations.AddIndex(
            model_name='commentreport',
            index=models.Index(fields=['reason'], name='comment_rep_reason_1a1e2b_idx'),
        ),
        migrations.AddIndex(
            model_name='commentreport',
            index=models.Index(fields=['created_at'], name='comment_rep_created_328184_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='commentreport',
            unique_together={('reporter', 'comment')},
        ),
        migrations.AddIndex(
            model_name='commentlike',
            index=models.Index(fields=['user'], name='comment_lik_user_id_49553a_idx'),
        ),
        migrations.AddIndex(
            model_name='commentlike',
            index=models.Index(fields=['comment'], name='comment_lik_comment_ca2ce9_idx'),
        ),
        migrations.AddIndex(
            model_name='commentlike',
            index=models.Index(fields=['reaction_type'], name='comment_lik_reactio_66a27e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='commentlike',
            unique_together={('user', 'comment')},
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['user'], name='comments_user_id_8613ff_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['match'], name='comments_match_i_6070c9_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['team'], name='comments_team_id_663198_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['status'], name='comments_status_593e70_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['comment_type'], name='comments_comment_070d3e_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['created_at'], name='comments_created_d5740c_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['parent'], name='comments_parent__9f8798_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['is_flagged'], name='comments_is_flag_59e033_idx'),
        ),
    ]
