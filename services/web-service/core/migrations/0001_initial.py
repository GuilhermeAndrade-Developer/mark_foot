# Generated by Django 4.2 on 2025-08-25 14:29

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ApiSyncLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(max_length=255)),
                ('http_status', models.IntegerField(blank=True, null=True)),
                ('records_processed', models.IntegerField(default=0)),
                ('records_inserted', models.IntegerField(default=0)),
                ('records_updated', models.IntegerField(default=0)),
                ('records_failed', models.IntegerField(default=0)),
                ('execution_time_ms', models.IntegerField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('request_params', models.JSONField(blank=True, null=True)),
                ('response_data', models.JSONField(blank=True, null=True)),
                ('sync_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'api_sync_logs',
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(blank=True, max_length=10, null=True)),
                ('flag_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'areas',
            },
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10)),
                ('type', models.CharField(choices=[('LEAGUE', 'League'), ('CUP', 'Cup'), ('TOURNAMENT', 'Tournament')], max_length=20)),
                ('emblem_url', models.URLField(blank=True, null=True)),
                ('plan', models.CharField(blank=True, choices=[('TIER_ONE', 'Tier One'), ('TIER_TWO', 'Tier Two'), ('TIER_THREE', 'Tier Three'), ('TIER_FOUR', 'Tier Four')], max_length=20, null=True)),
                ('current_season_id', models.BigIntegerField(blank=True, null=True)),
                ('number_of_available_seasons', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.area')),
            ],
            options={
                'db_table': 'competitions',
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('current_matchday', models.IntegerField(default=1)),
                ('available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.competition')),
            ],
            options={
                'db_table': 'seasons',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('short_name', models.CharField(blank=True, max_length=50, null=True)),
                ('tla', models.CharField(blank=True, max_length=10, null=True)),
                ('crest_url', models.URLField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('founded', models.IntegerField(blank=True, null=True)),
                ('club_colors', models.CharField(blank=True, max_length=100, null=True)),
                ('venue', models.CharField(blank=True, max_length=100, null=True)),
                ('last_updated', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.area')),
            ],
            options={
                'db_table': 'teams',
            },
        ),
        migrations.CreateModel(
            name='Standing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage', models.CharField(default='REGULAR_SEASON', max_length=50)),
                ('type', models.CharField(choices=[('TOTAL', 'Total'), ('HOME', 'Home'), ('AWAY', 'Away')], default='TOTAL', max_length=10)),
                ('group_name', models.CharField(blank=True, max_length=10, null=True)),
                ('position', models.IntegerField()),
                ('played_games', models.IntegerField(default=0)),
                ('form', models.CharField(blank=True, max_length=10, null=True)),
                ('won', models.IntegerField(default=0)),
                ('draw', models.IntegerField(default=0)),
                ('lost', models.IntegerField(default=0)),
                ('points', models.IntegerField(default=0)),
                ('goals_for', models.IntegerField(default=0)),
                ('goals_against', models.IntegerField(default=0)),
                ('goal_difference', models.IntegerField(default=0)),
                ('snapshot_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.competition')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.season')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.team')),
            ],
            options={
                'db_table': 'standings',
            },
        ),
        migrations.AddField(
            model_name='season',
            name='winner_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.team'),
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('utc_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('LIVE', 'Live'), ('IN_PLAY', 'In Play'), ('PAUSED', 'Paused'), ('FINISHED', 'Finished'), ('POSTPONED', 'Postponed'), ('SUSPENDED', 'Suspended'), ('CANCELLED', 'Cancelled')], max_length=20)),
                ('stage', models.CharField(blank=True, max_length=50, null=True)),
                ('group_name', models.CharField(blank=True, max_length=10, null=True)),
                ('matchday', models.IntegerField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(blank=True, null=True)),
                ('home_team_score', models.IntegerField(blank=True, null=True)),
                ('away_team_score', models.IntegerField(blank=True, null=True)),
                ('winner', models.CharField(blank=True, choices=[('HOME_TEAM', 'Home Team'), ('AWAY_TEAM', 'Away Team'), ('DRAW', 'Draw')], max_length=20, null=True)),
                ('duration', models.CharField(choices=[('REGULAR', 'Regular'), ('EXTRA_TIME', 'Extra Time'), ('PENALTY_SHOOTOUT', 'Penalty Shootout')], default='REGULAR', max_length=20)),
                ('attendance', models.IntegerField(blank=True, null=True)),
                ('referee_name', models.CharField(blank=True, max_length=100, null=True)),
                ('venue', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('away_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_matches', to='core.team')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.competition')),
                ('home_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_matches', to='core.team')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.season')),
            ],
            options={
                'db_table': 'matches',
            },
        ),
        migrations.AddIndex(
            model_name='area',
            index=models.Index(fields=['code'], name='areas_code_f22c35_idx'),
        ),
        migrations.AddIndex(
            model_name='area',
            index=models.Index(fields=['name'], name='areas_name_a940ef_idx'),
        ),
        migrations.AddIndex(
            model_name='apisynclog',
            index=models.Index(fields=['endpoint'], name='api_sync_lo_endpoin_dbf7b0_idx'),
        ),
        migrations.AddIndex(
            model_name='apisynclog',
            index=models.Index(fields=['sync_date'], name='api_sync_lo_sync_da_91f165_idx'),
        ),
        migrations.AddIndex(
            model_name='apisynclog',
            index=models.Index(fields=['http_status'], name='api_sync_lo_http_st_cf009d_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['name'], name='teams_name_12b53a_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['short_name'], name='teams_short_n_75416f_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['tla'], name='teams_tla_3ba438_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['area'], name='teams_area_id_618c2d_idx'),
        ),
        migrations.AddIndex(
            model_name='standing',
            index=models.Index(fields=['competition', 'season'], name='standings_competi_fd1299_idx'),
        ),
        migrations.AddIndex(
            model_name='standing',
            index=models.Index(fields=['position'], name='standings_positio_983a5b_idx'),
        ),
        migrations.AddIndex(
            model_name='standing',
            index=models.Index(fields=['-points'], name='standings_points_98279e_idx'),
        ),
        migrations.AddIndex(
            model_name='standing',
            index=models.Index(fields=['snapshot_date'], name='standings_snapsho_b24943_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='standing',
            unique_together={('competition', 'season', 'team', 'type', 'stage', 'snapshot_date')},
        ),
        migrations.AddIndex(
            model_name='season',
            index=models.Index(fields=['competition'], name='seasons_competi_cba6bc_idx'),
        ),
        migrations.AddIndex(
            model_name='season',
            index=models.Index(fields=['start_date', 'end_date'], name='seasons_start_d_c59787_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='season',
            unique_together={('competition', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['competition', 'season'], name='matches_competi_6c9ae9_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['home_team', 'away_team'], name='matches_home_te_a02a11_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['utc_date'], name='matches_utc_dat_cd29e4_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['status'], name='matches_status_639056_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['matchday'], name='matches_matchda_426732_idx'),
        ),
        migrations.AddIndex(
            model_name='competition',
            index=models.Index(fields=['code'], name='competition_code_4af0d5_idx'),
        ),
        migrations.AddIndex(
            model_name='competition',
            index=models.Index(fields=['area'], name='competition_area_id_de7f2c_idx'),
        ),
        migrations.AddIndex(
            model_name='competition',
            index=models.Index(fields=['type'], name='competition_type_c57890_idx'),
        ),
    ]
