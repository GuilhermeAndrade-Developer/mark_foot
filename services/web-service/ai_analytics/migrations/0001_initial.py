# Generated by Django 4.2 on 2025-08-25 20:52

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0002_player_playertransfer_playerstatistics_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnomalyDetection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(help_text='Type of entity (player, team, match)', max_length=20)),
                ('entity_id', models.BigIntegerField(help_text='ID of the entity')),
                ('anomaly_type', models.CharField(choices=[('PERFORMANCE', 'Performance Anomaly'), ('BETTING', 'Betting Anomaly'), ('STATISTICAL', 'Statistical Anomaly'), ('BEHAVIORAL', 'Behavioral Anomaly')], max_length=20)),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], max_length=10)),
                ('anomaly_score', models.FloatField(help_text='Anomaly score (higher = more anomalous)')),
                ('description', models.TextField(help_text='Description of the anomaly')),
                ('evidence', models.JSONField(help_text='Evidence and data supporting anomaly')),
                ('normal_range', models.JSONField(help_text='Expected normal range for comparison')),
                ('actual_values', models.JSONField(help_text='Actual values that triggered anomaly')),
                ('model_version', models.CharField(max_length=50)),
                ('detection_date', models.DateTimeField()),
                ('investigated', models.BooleanField(default=False)),
                ('investigation_notes', models.TextField(blank=True, null=True)),
                ('false_positive', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_anomaly_detection',
            },
        ),
        migrations.CreateModel(
            name='InjuryPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_level', models.CharField(choices=[('LOW', 'Low Risk'), ('MEDIUM', 'Medium Risk'), ('HIGH', 'High Risk'), ('CRITICAL', 'Critical Risk')], max_length=10)),
                ('injury_type', models.CharField(choices=[('MUSCLE', 'Muscle Injury'), ('LIGAMENT', 'Ligament Injury'), ('BONE', 'Bone Injury'), ('FATIGUE', 'Fatigue/Overuse'), ('GENERAL', 'General Injury')], max_length=20)),
                ('risk_score', models.FloatField(help_text='Risk score (0-100)')),
                ('prediction_period', models.IntegerField(help_text='Prediction period in days')),
                ('risk_factors', models.JSONField(help_text='Factors contributing to injury risk')),
                ('recommended_actions', models.JSONField(help_text='Recommended preventive actions')),
                ('model_version', models.CharField(max_length=50)),
                ('prediction_date', models.DateTimeField()),
                ('actual_injury_occurred', models.BooleanField(blank=True, null=True)),
                ('actual_injury_date', models.DateTimeField(blank=True, null=True)),
                ('actual_injury_type', models.CharField(blank=True, choices=[('MUSCLE', 'Muscle Injury'), ('LIGAMENT', 'Ligament Injury'), ('BONE', 'Bone Injury'), ('FATIGUE', 'Fatigue/Overuse'), ('GENERAL', 'General Injury')], max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_injury_predictions',
            },
        ),
        migrations.CreateModel(
            name='MarketValuePrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('predicted_value', models.DecimalField(decimal_places=2, help_text='Predicted market value', max_digits=15)),
                ('currency', models.CharField(default='EUR', max_length=3)),
                ('confidence_interval_low', models.DecimalField(decimal_places=2, max_digits=15)),
                ('confidence_interval_high', models.DecimalField(decimal_places=2, max_digits=15)),
                ('value_factors', models.JSONField(help_text='Factors affecting market value')),
                ('trend_analysis', models.JSONField(help_text='Value trend over time')),
                ('comparable_players', models.JSONField(help_text='Similar players for value comparison')),
                ('model_version', models.CharField(max_length=50)),
                ('prediction_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_market_value_predictions',
            },
        ),
        migrations.CreateModel(
            name='MatchPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_type', models.CharField(choices=[('RESULT', 'Match Result'), ('SCORE', 'Exact Score'), ('GOALS', 'Total Goals'), ('BOTH_TEAMS_SCORE', 'Both Teams to Score')], max_length=20)),
                ('predicted_value', models.CharField(help_text='Predicted outcome', max_length=50)),
                ('confidence_score', models.FloatField(help_text='Confidence percentage (0-1)')),
                ('model_version', models.CharField(help_text='AI model version used', max_length=50)),
                ('features_used', models.JSONField(help_text='Features used for prediction')),
                ('actual_value', models.CharField(blank=True, max_length=50, null=True)),
                ('prediction_accuracy', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_match_predictions',
            },
        ),
        migrations.CreateModel(
            name='PlayerRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('SIGNING', 'Transfer Signing'), ('LINEUP', 'Starting Lineup'), ('SUBSTITUTE', 'Substitution'), ('CAPTAIN', 'Team Captain'), ('FANTASY', 'Fantasy Pick')], max_length=20)),
                ('score', models.FloatField(help_text='Recommendation score (0-100)')),
                ('reasons', models.JSONField(help_text='List of reasons for recommendation')),
                ('attributes_analysis', models.JSONField(help_text='Detailed attributes analysis')),
                ('comparison_players', models.JSONField(blank=True, help_text='Similar players for comparison', null=True)),
                ('model_version', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_player_recommendations',
            },
        ),
        migrations.CreateModel(
            name='PlayStyleCluster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(choices=[('PLAYER', 'Player Style'), ('TEAM', 'Team Style')], max_length=10)),
                ('entity_id', models.BigIntegerField(help_text='ID of player or team')),
                ('cluster_id', models.IntegerField(help_text='Cluster group ID')),
                ('cluster_name', models.CharField(help_text='Descriptive cluster name', max_length=100)),
                ('style_attributes', models.JSONField(help_text='Key style attributes')),
                ('cluster_centroid', models.JSONField(help_text='Cluster center coordinates')),
                ('distance_to_centroid', models.FloatField(help_text='Distance from cluster center')),
                ('similar_entities', models.JSONField(help_text='Other entities in same cluster')),
                ('characteristic_stats', models.JSONField(help_text='Stats that define this style')),
                ('model_version', models.CharField(max_length=50)),
                ('analysis_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_playstyle_clusters',
            },
        ),
        migrations.CreateModel(
            name='SentimentAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(choices=[('PLAYER', 'Player'), ('TEAM', 'Team'), ('MATCH', 'Match'), ('COMPETITION', 'Competition')], max_length=20)),
                ('entity_id', models.BigIntegerField(help_text='ID of the entity (player, team, etc.)')),
                ('sentiment', models.CharField(choices=[('POSITIVE', 'Positive'), ('NEGATIVE', 'Negative'), ('NEUTRAL', 'Neutral')], max_length=10)),
                ('sentiment_score', models.FloatField(help_text='Sentiment score (-1 to 1)')),
                ('confidence', models.FloatField(help_text='Confidence in sentiment analysis')),
                ('source_text', models.TextField(help_text='Original text analyzed')),
                ('source_platform', models.CharField(help_text='Platform source (Twitter, Facebook, etc.)', max_length=50)),
                ('keywords', models.JSONField(help_text='Key words/phrases extracted')),
                ('analysis_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'ai_sentiment_analysis',
            },
        ),
        migrations.CreateModel(
            name='TransferSimulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfer_type', models.CharField(choices=[('IN', 'Transfer In'), ('OUT', 'Transfer Out'), ('LOAN_IN', 'Loan In'), ('LOAN_OUT', 'Loan Out')], max_length=10)),
                ('estimated_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('wage_impact', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('team_strength_change', models.FloatField(help_text='Change in team strength (-100 to 100)')),
                ('predicted_performance', models.JSONField(help_text='Predicted performance metrics')),
                ('tactical_fit', models.FloatField(help_text='How well player fits team tactics (0-100)')),
                ('impact_analysis', models.JSONField(help_text='Detailed impact analysis')),
                ('risk_assessment', models.JSONField(help_text='Transfer risk assessment')),
                ('success_probability', models.FloatField(help_text='Probability of successful transfer')),
                ('model_version', models.CharField(max_length=50)),
                ('simulation_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulated_transfers_out', to='core.team')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_simulations', to='core.player')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.season')),
                ('to_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulated_transfers_in', to='core.team')),
            ],
            options={
                'db_table': 'ai_transfer_simulations',
            },
        ),
        migrations.AddIndex(
            model_name='sentimentanalysis',
            index=models.Index(fields=['entity_type', 'entity_id'], name='ai_sentimen_entity__4487c2_idx'),
        ),
        migrations.AddIndex(
            model_name='sentimentanalysis',
            index=models.Index(fields=['sentiment'], name='ai_sentimen_sentime_439a18_idx'),
        ),
        migrations.AddIndex(
            model_name='sentimentanalysis',
            index=models.Index(fields=['analysis_date'], name='ai_sentimen_analysi_bc2ee0_idx'),
        ),
        migrations.AddField(
            model_name='playstylecluster',
            name='season',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.season'),
        ),
        migrations.AddField(
            model_name='playerrecommendation',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='core.player'),
        ),
        migrations.AddField(
            model_name='playerrecommendation',
            name='season',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.season'),
        ),
        migrations.AddField(
            model_name='playerrecommendation',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_recommendations', to='core.team'),
        ),
        migrations.AddField(
            model_name='matchprediction',
            name='match',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='core.match'),
        ),
        migrations.AddField(
            model_name='marketvalueprediction',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_predictions', to='core.player'),
        ),
        migrations.AddField(
            model_name='marketvalueprediction',
            name='season',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.season'),
        ),
        migrations.AddField(
            model_name='injuryprediction',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='injury_predictions', to='core.player'),
        ),
        migrations.AddIndex(
            model_name='anomalydetection',
            index=models.Index(fields=['entity_type', 'entity_id'], name='ai_anomaly__entity__f57544_idx'),
        ),
        migrations.AddIndex(
            model_name='anomalydetection',
            index=models.Index(fields=['anomaly_type', 'severity'], name='ai_anomaly__anomaly_6879fa_idx'),
        ),
        migrations.AddIndex(
            model_name='anomalydetection',
            index=models.Index(fields=['detection_date'], name='ai_anomaly__detecti_6d5b27_idx'),
        ),
        migrations.AddIndex(
            model_name='anomalydetection',
            index=models.Index(fields=['investigated'], name='ai_anomaly__investi_533a34_idx'),
        ),
        migrations.AddIndex(
            model_name='transfersimulation',
            index=models.Index(fields=['player', 'from_team', 'to_team'], name='ai_transfer_player__44e252_idx'),
        ),
        migrations.AddIndex(
            model_name='transfersimulation',
            index=models.Index(fields=['transfer_type'], name='ai_transfer_transfe_d258f8_idx'),
        ),
        migrations.AddIndex(
            model_name='transfersimulation',
            index=models.Index(fields=['simulation_date'], name='ai_transfer_simulat_ba1916_idx'),
        ),
        migrations.AddIndex(
            model_name='transfersimulation',
            index=models.Index(fields=['success_probability'], name='ai_transfer_success_a66b12_idx'),
        ),
        migrations.AddIndex(
            model_name='playstylecluster',
            index=models.Index(fields=['entity_type', 'entity_id'], name='ai_playstyl_entity__620018_idx'),
        ),
        migrations.AddIndex(
            model_name='playstylecluster',
            index=models.Index(fields=['cluster_id'], name='ai_playstyl_cluster_11d2ee_idx'),
        ),
        migrations.AddIndex(
            model_name='playstylecluster',
            index=models.Index(fields=['season'], name='ai_playstyl_season__f9aebd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='playstylecluster',
            unique_together={('entity_type', 'entity_id', 'season', 'model_version')},
        ),
        migrations.AddIndex(
            model_name='playerrecommendation',
            index=models.Index(fields=['player', 'team'], name='ai_player_r_player__2f0228_idx'),
        ),
        migrations.AddIndex(
            model_name='playerrecommendation',
            index=models.Index(fields=['recommendation_type'], name='ai_player_r_recomme_d75dc4_idx'),
        ),
        migrations.AddIndex(
            model_name='playerrecommendation',
            index=models.Index(fields=['score'], name='ai_player_r_score_8cf313_idx'),
        ),
        migrations.AddIndex(
            model_name='playerrecommendation',
            index=models.Index(fields=['season'], name='ai_player_r_season__47a167_idx'),
        ),
        migrations.AddIndex(
            model_name='matchprediction',
            index=models.Index(fields=['match', 'prediction_type'], name='ai_match_pr_match_i_3682a3_idx'),
        ),
        migrations.AddIndex(
            model_name='matchprediction',
            index=models.Index(fields=['confidence_score'], name='ai_match_pr_confide_6129ef_idx'),
        ),
        migrations.AddIndex(
            model_name='matchprediction',
            index=models.Index(fields=['created_at'], name='ai_match_pr_created_431070_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='matchprediction',
            unique_together={('match', 'prediction_type', 'model_version')},
        ),
        migrations.AddIndex(
            model_name='marketvalueprediction',
            index=models.Index(fields=['player', 'prediction_date'], name='ai_market_v_player__aec811_idx'),
        ),
        migrations.AddIndex(
            model_name='marketvalueprediction',
            index=models.Index(fields=['predicted_value'], name='ai_market_v_predict_05862a_idx'),
        ),
        migrations.AddIndex(
            model_name='marketvalueprediction',
            index=models.Index(fields=['season'], name='ai_market_v_season__b69678_idx'),
        ),
        migrations.AddIndex(
            model_name='injuryprediction',
            index=models.Index(fields=['player', 'risk_level'], name='ai_injury_p_player__94dfe9_idx'),
        ),
        migrations.AddIndex(
            model_name='injuryprediction',
            index=models.Index(fields=['prediction_date'], name='ai_injury_p_predict_1fd364_idx'),
        ),
        migrations.AddIndex(
            model_name='injuryprediction',
            index=models.Index(fields=['risk_score'], name='ai_injury_p_risk_sc_4a6835_idx'),
        ),
    ]
