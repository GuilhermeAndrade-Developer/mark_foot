# Generated by Django 4.2 on 2025-08-26 17:11

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0002_player_playertransfer_playerstatistics_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(help_text='Icon class or emoji', max_length=50)),
                ('rarity', models.CharField(choices=[('common', 'Comum'), ('uncommon', 'Incomum'), ('rare', 'Raro'), ('epic', 'Épico'), ('legendary', 'Lendário')], default='common', max_length=20)),
                ('category', models.CharField(choices=[('prediction', 'Predição'), ('fantasy', 'Fantasy'), ('social', 'Social'), ('engagement', 'Engajamento'), ('achievement', 'Conquista'), ('special', 'Especial')], max_length=20)),
                ('points_required', models.PositiveIntegerField(default=0)),
                ('conditions', models.JSONField(default=dict, help_text='Conditions to earn this badge')),
                ('points_reward', models.PositiveIntegerField(default=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['rarity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FantasyLeague',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('public', 'Pública'), ('private', 'Privada'), ('premium', 'Premium')], default='public', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Rascunho'), ('active', 'Ativa'), ('finished', 'Finalizada'), ('cancelled', 'Cancelada')], default='draft', max_length=20)),
                ('max_participants', models.PositiveIntegerField(default=20)),
                ('entry_fee_points', models.PositiveIntegerField(default=0, help_text='Points required to join')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('registration_deadline', models.DateTimeField()),
                ('total_prize_points', models.PositiveIntegerField(default=0)),
                ('prize_distribution', models.JSONField(default=dict, help_text='How prizes are distributed')),
                ('scoring_rules', models.JSONField(default=dict, help_text='Points scoring rules')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('competition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.competition')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_leagues', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Liga Fantasy',
                'verbose_name_plural': 'Ligas Fantasy',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('type', models.CharField(choices=[('prediction', 'Torneio de Predições'), ('fantasy', 'Torneio Fantasy'), ('quiz', 'Torneio de Quiz'), ('mixed', 'Torneio Misto')], max_length=20)),
                ('status', models.CharField(choices=[('registration', 'Inscrições'), ('active', 'Ativo'), ('finished', 'Finalizado'), ('cancelled', 'Cancelado')], default='registration', max_length=20)),
                ('max_participants', models.PositiveIntegerField(default=32)),
                ('entry_fee_points', models.PositiveIntegerField(default=100)),
                ('registration_start', models.DateTimeField()),
                ('registration_end', models.DateTimeField()),
                ('tournament_start', models.DateTimeField()),
                ('tournament_end', models.DateTimeField()),
                ('total_prize_pool', models.PositiveIntegerField(default=0)),
                ('prize_distribution', models.JSONField(default=dict)),
                ('tournament_rules', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Torneio',
                'verbose_name_plural': 'Torneios',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WeeklyChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('type', models.CharField(choices=[('prediction', 'Predição'), ('quiz', 'Quiz'), ('fantasy', 'Fantasy'), ('social', 'Social')], max_length=20)),
                ('status', models.CharField(choices=[('upcoming', 'Próximo'), ('active', 'Ativo'), ('completed', 'Completo'), ('cancelled', 'Cancelado')], default='upcoming', max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('requirements', models.JSONField(default=dict, help_text='Challenge requirements')),
                ('points_reward', models.PositiveIntegerField(default=50)),
                ('max_participants', models.PositiveIntegerField(default=1000)),
                ('participation_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('badge_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.badge')),
            ],
            options={
                'verbose_name': 'Desafio Semanal',
                'verbose_name_plural': 'Desafios Semanais',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('level', models.PositiveIntegerField(default=1)),
                ('experience_points', models.PositiveIntegerField(default=0)),
                ('streak_days', models.PositiveIntegerField(default=0)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('notification_preferences', models.JSONField(blank=True, default=dict)),
                ('total_predictions', models.PositiveIntegerField(default=0)),
                ('correct_predictions', models.PositiveIntegerField(default=0)),
                ('prediction_accuracy', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.player')),
                ('favorite_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.team')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gamification_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil do Usuário',
                'verbose_name_plural': 'Perfis dos Usuários',
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by', to='gamification.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Badge do Usuário',
                'verbose_name_plural': 'Badges dos Usuários',
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='TournamentParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('registered', 'Inscrito'), ('active', 'Ativo'), ('eliminated', 'Eliminado'), ('winner', 'Vencedor'), ('runner_up', 'Vice-campeão')], default='registered', max_length=20)),
                ('current_round', models.PositiveIntegerField(default=1)),
                ('total_points', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('final_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='gamification.tournament')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Participação em Torneio',
                'verbose_name_plural': 'Participações em Torneios',
                'ordering': ['-total_points'],
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('predicted_result', models.CharField(choices=[('1', 'Vitória Casa'), ('X', 'Empate'), ('2', 'Vitória Visitante')], max_length=1)),
                ('predicted_home_score', models.PositiveIntegerField(blank=True, null=True)),
                ('predicted_away_score', models.PositiveIntegerField(blank=True, null=True)),
                ('confidence', models.PositiveIntegerField(help_text='Confidence level 1-10', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('points_bet', models.PositiveIntegerField(default=10)),
                ('potential_points', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('correct', 'Correto'), ('incorrect', 'Incorreto'), ('cancelled', 'Cancelado')], default='pending', max_length=20)),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_predictions', to='core.match')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_predictions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Predição',
                'verbose_name_plural': 'Predições',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PointsTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('earned', 'Ganho'), ('spent', 'Gasto'), ('bonus', 'Bônus'), ('penalty', 'Penalidade'), ('refund', 'Reembolso')], max_length=20)),
                ('amount', models.IntegerField(help_text='Positive for credits, negative for debits')),
                ('source_type', models.CharField(help_text='Model name that generated this transaction', max_length=50)),
                ('source_id', models.PositiveIntegerField(help_text='ID of the source object')),
                ('description', models.CharField(max_length=200)),
                ('balance_before', models.PositiveIntegerField()),
                ('balance_after', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transação de Pontos',
                'verbose_name_plural': 'Transações de Pontos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FantasyTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(max_length=50)),
                ('initial_budget', models.DecimalField(decimal_places=2, default=100.0, max_digits=10)),
                ('remaining_budget', models.DecimalField(decimal_places=2, default=100.0, max_digits=10)),
                ('total_points', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('current_rank', models.PositiveIntegerField(default=1)),
                ('formation', models.CharField(default='4-4-2', help_text='e.g., 4-4-2, 3-5-2', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='gamification.fantasyleague')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fantasy_teams', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Time Fantasy',
                'verbose_name_plural': 'Times Fantasy',
                'ordering': ['-total_points'],
            },
        ),
        migrations.CreateModel(
            name='FantasyPlayerSelection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(choices=[('GK', 'Goleiro'), ('DEF', 'Defensor'), ('MID', 'Meio-campo'), ('FWD', 'Atacante')], max_length=3)),
                ('selection_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('current_value', models.DecimalField(decimal_places=2, max_digits=8)),
                ('is_captain', models.BooleanField(default=False)),
                ('is_vice_captain', models.BooleanField(default=False)),
                ('is_starter', models.BooleanField(default=True)),
                ('selected_at', models.DateTimeField(auto_now_add=True)),
                ('fantasy_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selected_players', to='gamification.fantasyteam')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.player')),
            ],
            options={
                'verbose_name': 'Jogador Selecionado',
                'verbose_name_plural': 'Jogadores Selecionados',
            },
        ),
        migrations.CreateModel(
            name='ChallengeParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('participating', 'Participando'), ('completed', 'Completo'), ('failed', 'Falhou')], default='participating', max_length=20)),
                ('progress', models.JSONField(default=dict)),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='gamification.weeklychallenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Participação em Desafio',
                'verbose_name_plural': 'Participações em Desafios',
            },
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['total_points'], name='gamificatio_total_p_8e08af_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['level'], name='gamificatio_level_8235fd_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['prediction_accuracy'], name='gamificatio_predict_37fcbe_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user', 'badge')},
        ),
        migrations.AlterUniqueTogether(
            name='tournamentparticipation',
            unique_together={('user', 'tournament')},
        ),
        migrations.AddIndex(
            model_name='prediction',
            index=models.Index(fields=['status'], name='gamificatio_status_3ae5a3_idx'),
        ),
        migrations.AddIndex(
            model_name='prediction',
            index=models.Index(fields=['created_at'], name='gamificatio_created_64710d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='prediction',
            unique_together={('user', 'match')},
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['user', '-created_at'], name='gamificatio_user_id_9393e2_idx'),
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['source_type', 'source_id'], name='gamificatio_source__043de9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='fantasyteam',
            unique_together={('user', 'league')},
        ),
        migrations.AlterUniqueTogether(
            name='fantasyplayerselection',
            unique_together={('fantasy_team', 'player')},
        ),
        migrations.AlterUniqueTogether(
            name='challengeparticipation',
            unique_together={('user', 'challenge')},
        ),
    ]
