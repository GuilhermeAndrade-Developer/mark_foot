# Generated by Django 4.2 on 2025-08-26 20:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0002_player_playertransfer_playerstatistics_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('prediction', 'Predição'), ('fantasy', 'Fantasy'), ('social', 'Social'), ('streak', 'Sequência'), ('special', 'Especial')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Comum'), ('uncommon', 'Incomum'), ('rare', 'Raro'), ('epic', 'Épico'), ('legendary', 'Lendário')], default='common', max_length=20)),
                ('icon_url', models.CharField(max_length=200)),
                ('points_reward', models.PositiveIntegerField(default=0)),
                ('required_predictions', models.PositiveIntegerField(blank=True, null=True)),
                ('required_streak', models.PositiveIntegerField(blank=True, null=True)),
                ('required_fantasy_points', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'badges',
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('prediction', 'Predição'), ('fantasy', 'Fantasy'), ('streak', 'Sequência'), ('social', 'Social')], max_length=20)),
                ('status', models.CharField(choices=[('upcoming', 'Próximo'), ('active', 'Ativo'), ('completed', 'Concluído'), ('cancelled', 'Cancelado')], default='upcoming', max_length=20)),
                ('requirements', models.JSONField(default=dict)),
                ('points_reward', models.PositiveIntegerField(default=0)),
                ('max_participants', models.PositiveIntegerField(default=1000)),
                ('current_participants', models.PositiveIntegerField(default=0)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('badge_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.badge')),
            ],
            options={
                'db_table': 'challenges',
            },
        ),
        migrations.CreateModel(
            name='FantasyLeague',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('league_type', models.CharField(choices=[('public', 'Pública'), ('private', 'Privada'), ('premium', 'Premium')], max_length=20)),
                ('max_participants', models.PositiveIntegerField(default=20)),
                ('entry_fee_points', models.PositiveIntegerField(default=0)),
                ('prize_pool', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('join_code', models.CharField(max_length=8, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('starts_at', models.DateTimeField()),
                ('ends_at', models.DateTimeField()),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.competition')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.season')),
            ],
            options={
                'db_table': 'fantasy_leagues',
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('leaderboard_type', models.CharField(choices=[('overall_points', 'Pontuação Geral'), ('prediction_accuracy', 'Precisão de Predições'), ('fantasy_league', 'Liga Fantasy'), ('weekly', 'Semanal'), ('monthly', 'Mensal')], max_length=30)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('competition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.competition')),
                ('season', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.season')),
            ],
            options={
                'db_table': 'leaderboards',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('level', models.PositiveIntegerField(default=1)),
                ('experience_points', models.PositiveIntegerField(default=0)),
                ('prediction_streak', models.PositiveIntegerField(default=0)),
                ('login_streak', models.PositiveIntegerField(default=0)),
                ('last_login_date', models.DateField(blank=True, null=True)),
                ('is_public_profile', models.BooleanField(default=True)),
                ('allow_friend_requests', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_competition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.competition')),
                ('favorite_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.team')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('participating', 'Participando'), ('completed', 'Completo'), ('failed', 'Falhou')], default='participating', max_length=20)),
                ('progress_data', models.JSONField(default=dict)),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_challenges',
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('is_showcased', models.BooleanField(default=False)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_badges',
            },
        ),
        migrations.CreateModel(
            name='PredictionGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('game_type', models.CharField(choices=[('match_result', 'Resultado da Partida'), ('exact_score', 'Placar Exato'), ('weekly_round', 'Rodada Semanal'), ('tournament', 'Torneio')], max_length=20)),
                ('status', models.CharField(choices=[('upcoming', 'Próximo'), ('active', 'Ativo'), ('closed', 'Fechado'), ('resolved', 'Resolvido')], default='upcoming', max_length=20)),
                ('entry_fee_points', models.PositiveIntegerField(default=0)),
                ('reward_multiplier', models.DecimalField(decimal_places=2, default=2.0, max_digits=4)),
                ('starts_at', models.DateTimeField()),
                ('ends_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('competition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.competition')),
                ('match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.match')),
            ],
            options={
                'db_table': 'prediction_games',
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_data', models.JSONField()),
                ('points_earned', models.IntegerField(default=0)),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.predictiongame')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'predictions',
            },
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('earned', 'Ganho'), ('spent', 'Gasto'), ('bonus', 'Bônus'), ('penalty', 'Penalidade'), ('refund', 'Reembolso')], max_length=20)),
                ('amount', models.IntegerField()),
                ('description', models.CharField(max_length=255)),
                ('source_type', models.CharField(blank=True, max_length=50, null=True)),
                ('source_id', models.PositiveIntegerField(blank=True, null=True)),
                ('balance_before', models.PositiveIntegerField()),
                ('balance_after', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'point_transactions',
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField()),
                ('score', models.DecimalField(decimal_places=2, max_digits=10)),
                ('additional_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.leaderboard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'leaderboard_entries',
            },
        ),
        migrations.CreateModel(
            name='FantasyTeam',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('formation', models.CharField(choices=[('4-4-2', '4-4-2'), ('4-3-3', '4-3-3'), ('3-5-2', '3-5-2'), ('4-5-1', '4-5-1'), ('5-3-2', '5-3-2')], default='4-4-2', max_length=10)),
                ('total_points', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('remaining_budget', models.DecimalField(decimal_places=2, default=100.0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('defenders', models.ManyToManyField(blank=True, related_name='fantasy_teams_def', to='core.player')),
                ('forwards', models.ManyToManyField(blank=True, related_name='fantasy_teams_fwd', to='core.player')),
                ('goalkeepers', models.ManyToManyField(blank=True, related_name='fantasy_teams_gk', to='core.player')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.fantasyleague')),
                ('midfielders', models.ManyToManyField(blank=True, related_name='fantasy_teams_mid', to='core.player')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'fantasy_teams',
            },
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['total_points'], name='user_profil_total_p_7e9068_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['level'], name='user_profil_level_78c7c6_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['prediction_streak'], name='user_profil_predict_9bb083_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userchallenge',
            unique_together={('user', 'challenge')},
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user', 'badge')},
        ),
        migrations.AddIndex(
            model_name='prediction',
            index=models.Index(fields=['user'], name='predictions_user_id_693109_idx'),
        ),
        migrations.AddIndex(
            model_name='prediction',
            index=models.Index(fields=['game'], name='predictions_game_id_4f8618_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['user', '-created_at'], name='point_trans_user_id_62267a_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['transaction_type'], name='point_trans_transac_c2dc83_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboardentry',
            index=models.Index(fields=['leaderboard', 'rank'], name='leaderboard_leaderb_bb9735_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboardentry',
            index=models.Index(fields=['user'], name='leaderboard_user_id_b0bb0d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='leaderboardentry',
            unique_together={('leaderboard', 'user')},
        ),
        migrations.AddIndex(
            model_name='fantasyleague',
            index=models.Index(fields=['league_type'], name='fantasy_lea_league__bad76c_idx'),
        ),
        migrations.AddIndex(
            model_name='fantasyleague',
            index=models.Index(fields=['competition'], name='fantasy_lea_competi_70c3b0_idx'),
        ),
        migrations.AddIndex(
            model_name='fantasyleague',
            index=models.Index(fields=['created_by'], name='fantasy_lea_created_b7ad7d_idx'),
        ),
        migrations.AddIndex(
            model_name='fantasyleague',
            index=models.Index(fields=['season'], name='fantasy_lea_season__23af8b_idx'),
        ),
    ]
