# Generated by Django 4.2 on 2025-08-30 14:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_player_playertransfer_playerstatistics_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('social', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ShareTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('template_type', models.CharField(choices=[('match_result', 'Match Result'), ('player_stat', 'Player Statistics'), ('team_news', 'Team News'), ('prediction', 'Prediction'), ('achievement', 'User Achievement'), ('league_update', 'League Update'), ('custom', 'Custom')], max_length=20)),
                ('title_template', models.CharField(help_text='Template for title/headline', max_length=100)),
                ('content_template', models.TextField(help_text='Template for main content with placeholders')),
                ('hashtags', models.CharField(blank=True, help_text='Default hashtags', max_length=200)),
                ('available_variables', models.JSONField(default=list, help_text='List of available variables for this template')),
                ('is_active', models.BooleanField(default=True)),
                ('auto_share', models.BooleanField(default=False, help_text='Automatically share when conditions are met')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'share_templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SocialPlatform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('twitter', 'Twitter/X'), ('instagram', 'Instagram'), ('tiktok', 'TikTok'), ('facebook', 'Facebook'), ('youtube', 'YouTube'), ('linkedin', 'LinkedIn')], max_length=20, unique=True)),
                ('display_name', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('api_key', models.CharField(blank=True, max_length=255)),
                ('api_secret', models.CharField(blank=True, max_length=255)),
                ('access_token', models.TextField(blank=True)),
                ('access_token_secret', models.CharField(blank=True, max_length=255)),
                ('base_url', models.URLField(blank=True)),
                ('character_limit', models.PositiveIntegerField(default=280)),
                ('supports_images', models.BooleanField(default=True)),
                ('supports_videos', models.BooleanField(default=True)),
                ('supports_hashtags', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'social_platforms',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SocialShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('hashtags', models.CharField(blank=True, max_length=200)),
                ('image_url', models.URLField(blank=True)),
                ('video_url', models.URLField(blank=True)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('platform_post_id', models.CharField(blank=True, max_length=100)),
                ('platform_url', models.URLField(blank=True)),
                ('platform_response', models.JSONField(blank=True, default=dict)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('shares_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('scheduled', 'Scheduled'), ('published', 'Published'), ('failed', 'Failed'), ('deleted', 'Deleted')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='social.comment')),
                ('match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='core.match')),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='social.socialplatform')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='core.team')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='social.sharetemplate')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_shares', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'social_shares',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='sharetemplate',
            name='platform',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='social.socialplatform'),
        ),
        migrations.CreateModel(
            name='PrivateGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('group_type', models.CharField(choices=[('family', 'Family'), ('friends', 'Friends'), ('team_fans', 'Team Fans'), ('competition', 'Competition Group'), ('custom', 'Custom')], default='custom', max_length=20)),
                ('privacy_level', models.CharField(choices=[('private', 'Private - Invite Only'), ('restricted', 'Restricted - Request to Join'), ('public', 'Public - Anyone can Join')], default='private', max_length=20)),
                ('max_members', models.PositiveIntegerField(default=50)),
                ('allow_member_invites', models.BooleanField(default=True)),
                ('require_admin_approval', models.BooleanField(default=True)),
                ('cover_image', models.URLField(blank=True)),
                ('avatar_image', models.URLField(blank=True)),
                ('member_count', models.PositiveIntegerField(default=0)),
                ('post_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_competition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.competition')),
                ('favorite_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.team')),
            ],
            options={
                'db_table': 'private_groups',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_type', models.CharField(choices=[('text', 'Text Post'), ('image', 'Image Post'), ('video', 'Video Post'), ('link', 'Link Share'), ('poll', 'Poll'), ('event', 'Event')], default='text', max_length=20)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField(max_length=2000)),
                ('image_url', models.URLField(blank=True)),
                ('video_url', models.URLField(blank=True)),
                ('link_url', models.URLField(blank=True)),
                ('link_title', models.CharField(blank=True, max_length=200)),
                ('link_description', models.TextField(blank=True, max_length=500)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('shares_count', models.PositiveIntegerField(default=0)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_announcement', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_posts', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='social.privategroup')),
                ('related_match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.match')),
                ('related_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.team')),
            ],
            options={
                'db_table': 'group_posts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Administrator'), ('moderator', 'Moderator'), ('member', 'Member')], default='member', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('pending', 'Pending Approval'), ('banned', 'Banned'), ('left', 'Left Group')], default='pending', max_length=20)),
                ('invitation_message', models.TextField(blank=True, max_length=200)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='social.privategroup')),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_invitations_sent', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'group_memberships',
                'ordering': ['-joined_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True, max_length=300)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('expires_at', models.DateTimeField()),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('response_message', models.TextField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='social.privategroup')),
                ('invitee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_group_invitations', to=settings.AUTH_USER_MODEL)),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_group_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'group_invitations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='socialshare',
            index=models.Index(fields=['platform'], name='social_shar_platfor_15db72_idx'),
        ),
        migrations.AddIndex(
            model_name='socialshare',
            index=models.Index(fields=['user'], name='social_shar_user_id_ed112b_idx'),
        ),
        migrations.AddIndex(
            model_name='socialshare',
            index=models.Index(fields=['status'], name='social_shar_status_02f0ca_idx'),
        ),
        migrations.AddIndex(
            model_name='socialshare',
            index=models.Index(fields=['scheduled_at'], name='social_shar_schedul_c68fd7_idx'),
        ),
        migrations.AddIndex(
            model_name='socialshare',
            index=models.Index(fields=['published_at'], name='social_shar_publish_52c824_idx'),
        ),
        migrations.AddIndex(
            model_name='socialshare',
            index=models.Index(fields=['created_at'], name='social_shar_created_c4a21e_idx'),
        ),
        migrations.AddIndex(
            model_name='sharetemplate',
            index=models.Index(fields=['platform'], name='share_templ_platfor_eae32e_idx'),
        ),
        migrations.AddIndex(
            model_name='sharetemplate',
            index=models.Index(fields=['template_type'], name='share_templ_templat_095ae9_idx'),
        ),
        migrations.AddIndex(
            model_name='sharetemplate',
            index=models.Index(fields=['is_active'], name='share_templ_is_acti_cb37af_idx'),
        ),
        migrations.AddIndex(
            model_name='privategroup',
            index=models.Index(fields=['group_type'], name='private_gro_group_t_49ea58_idx'),
        ),
        migrations.AddIndex(
            model_name='privategroup',
            index=models.Index(fields=['privacy_level'], name='private_gro_privacy_33c925_idx'),
        ),
        migrations.AddIndex(
            model_name='privategroup',
            index=models.Index(fields=['is_active'], name='private_gro_is_acti_c0510f_idx'),
        ),
        migrations.AddIndex(
            model_name='privategroup',
            index=models.Index(fields=['created_at'], name='private_gro_created_ee9f94_idx'),
        ),
        migrations.AddIndex(
            model_name='grouppost',
            index=models.Index(fields=['group', '-created_at'], name='group_posts_group_i_32ff5b_idx'),
        ),
        migrations.AddIndex(
            model_name='grouppost',
            index=models.Index(fields=['author'], name='group_posts_author__1b4033_idx'),
        ),
        migrations.AddIndex(
            model_name='grouppost',
            index=models.Index(fields=['post_type'], name='group_posts_post_ty_f3a2ef_idx'),
        ),
        migrations.AddIndex(
            model_name='grouppost',
            index=models.Index(fields=['is_pinned'], name='group_posts_is_pinn_319f8f_idx'),
        ),
        migrations.AddIndex(
            model_name='grouppost',
            index=models.Index(fields=['created_at'], name='group_posts_created_92378d_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['group'], name='group_membe_group_i_227045_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['user'], name='group_membe_user_id_8a6471_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['role'], name='group_membe_role_ae792e_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['status'], name='group_membe_status_1f8b2c_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['joined_at'], name='group_membe_joined__4d16e3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='groupmembership',
            unique_together={('group', 'user')},
        ),
        migrations.AddIndex(
            model_name='groupinvitation',
            index=models.Index(fields=['group'], name='group_invit_group_i_91f666_idx'),
        ),
        migrations.AddIndex(
            model_name='groupinvitation',
            index=models.Index(fields=['inviter'], name='group_invit_inviter_23e777_idx'),
        ),
        migrations.AddIndex(
            model_name='groupinvitation',
            index=models.Index(fields=['invitee'], name='group_invit_invitee_e509e3_idx'),
        ),
        migrations.AddIndex(
            model_name='groupinvitation',
            index=models.Index(fields=['status'], name='group_invit_status_0da15d_idx'),
        ),
        migrations.AddIndex(
            model_name='groupinvitation',
            index=models.Index(fields=['expires_at'], name='group_invit_expires_273cc5_idx'),
        ),
        migrations.AddIndex(
            model_name='groupinvitation',
            index=models.Index(fields=['created_at'], name='group_invit_created_476c99_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='groupinvitation',
            unique_together={('group', 'invitee')},
        ),
    ]
